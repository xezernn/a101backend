generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id          Int     @id @default(autoincrement())
    username    String  @unique
    password    String
    role        UserRole @default(USER) 
}

enum UserRole {
    USER    
    ADMIN 
}

model Product {
  id             Int        @id @default(autoincrement())
  name           String
  description    String
  metadata       String?
  imageUrl       String[]
  sizes          String[]
  categoryId     Int
  subcategoryId  Int
  price          Float  
  discount       Float  
  category       Category    @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory @relation(fields: [subcategoryId], references: [id])
  isTopSelling   Boolean     @default(false)
  isStok         Boolean     @default(true)
  isCheaps       Boolean     @default(false)
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  products    Product[]     
  subcategories Subcategory[]
  slider      Slider[]  
  images      String[]
}

model Subcategory {
  id          Int           @id @default(autoincrement())
  name        String
  categoryId  Int
  category    Category       @relation(fields: [categoryId], references: [id])
  products    Product[]   
  slider      Slider[]  
}

model Slider {
  id            Int         @id @default(autoincrement())
  img           String       
  categoryId    Int
  subcategoryId Int
  category       Category    @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory @relation(fields: [subcategoryId], references: [id])
}

model Order {
  id           Int       @id @default(autoincrement())
  customer     User  @relation(fields: [customerId], references: [id])
  customerId   Int
  products     OrderProduct[]
  status       String
  totalAmount  Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model OrderProduct {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int
}


